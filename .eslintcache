[{"D:\\React-js\\resturant\\src\\index.js":"1","D:\\React-js\\resturant\\src\\App.js":"2","D:\\React-js\\resturant\\src\\reportWebVitals.js":"3","D:\\React-js\\resturant\\src\\componants\\header.jsx":"4","D:\\React-js\\resturant\\src\\componants\\drawer.jsx":"5","D:\\React-js\\resturant\\src\\componants\\draw.jsx":"6","D:\\React-js\\resturant\\src\\componants\\todo.jsx":"7","D:\\React-js\\resturant\\src\\data.jsx":"8"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":412,"mtime":1613720808032,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":389,"mtime":1612381978618,"results":"13","hashOfConfig":"10"},{"size":2389,"mtime":1613028052032,"results":"14","hashOfConfig":"10"},{"size":4759,"mtime":1613028084618,"results":"15","hashOfConfig":"10"},{"size":3637,"mtime":1613723237992,"results":"16","hashOfConfig":"10"},{"size":239,"mtime":1613721054887,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1jql6gp",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\React-js\\resturant\\src\\index.js",[],["37","38"],"D:\\React-js\\resturant\\src\\App.js",[],"D:\\React-js\\resturant\\src\\reportWebVitals.js",[],"D:\\React-js\\resturant\\src\\componants\\header.jsx",[],"D:\\React-js\\resturant\\src\\componants\\drawer.jsx",["39","40","41","42","43"],"import React, { useState } from 'react';\r\nimport {makeStyles, Container, Table, TableHead, TableCell, TableRow} from '@material-ui/core';\r\nimport Data from './draw';\r\n\r\nconst setStyles = makeStyles((theme) => ({\r\n    root:{\r\n        marginLeft:'1100px',\r\n        position: 'fixed',\r\n        marginTop:'-1015px',\r\n        width:'400px',\r\n    }\r\n}));\r\n\r\nfunction Drawer(props) {\r\n    const classes = setStyles();\r\n    const [box,setbox] = useState(Data);\r\n    const [order, setOrder] = useState([]);\r\n    let total = 0;\r\n    const [sum, setSum] = useState();\r\n\r\n    const orderNow = (id) => {\r\n        let getProduct = box.filter(p => p.id === id);\r\n        let getOrder = order.filter(o => o.id === id);\r\n        if(getOrder.length > 0){\r\n            setOrder(order.map(value => {\r\n                if(value.id == id){\r\n                    value.qty+=1\r\n                }\r\n                total += (value.qty * value.price);\r\n                return value;\r\n            }))\r\n        }\r\n        else{\r\n            getProduct.map((value,key) =>{\r\n                setOrder([...order,{id:value.id,name:value.title,price:value.qty}]);\r\n                total += (value.qty * value.price);\r\n            })\r\n            setSum(total)\r\n        }\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <Container className={classes.root}>\r\n                <Table>\r\n                    <TableHead size='small'>\r\n                        <TableRow>\r\n                            <TableCell>Product Name</TableCell>\r\n                            <TableCell>Unit Price</TableCell>\r\n                            <TableCell>Qty</TableCell>\r\n                            <TableCell>Total Price</TableCell>\r\n                            <TableCell>Delete</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    {order.map((r,key) => (\r\n                        <TableRow>\r\n                            <TableCell>{r.title}</TableCell>\r\n                            <TableCell>{r.price}</TableCell>\r\n                            <TableCell>{r.qty}</TableCell>\r\n                            <TableCell>Total Price</TableCell>\r\n                            <TableCell button >Delete</TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </Table>\r\n            </Container>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Drawer;","D:\\React-js\\resturant\\src\\componants\\draw.jsx",[],"D:\\React-js\\resturant\\src\\componants\\todo.jsx",["44","45","46"],"import {React, useState} from 'react';\r\nimport {Button, Table, TableHead, TableRow, TableCell, makeStyles, Grid, Paper, TableBody, InputLabel, Input, FormControl, FormHelperText } from '@material-ui/core';\r\n\r\n\r\nfunction Todos(props){\r\n\r\n    const [data,setData] = useState(props.source);\r\n    const [name, setName] = useState(null);\r\n    const [email, setEmail] = useState(null);\r\n    const [roll, setRoll] = useState(null);\r\n    const addData = () => {\r\n        let newdata = [...data,{id:3,name:name,roll:roll,email:email}]\r\n        setData(newdata);\r\n        setName(\"\");\r\n        setRoll(\"\");\r\n        setEmail(\"\");\r\n    }\r\n\r\n    const deleteData = (id) => {\r\n        setData(data.filter(x => x.id != id));\r\n    };\r\n    return(\r\n        <React.Fragment>\r\n            <Grid container>\r\n            <Grid item xs={6}>\r\n          <Paper>\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Name</TableCell>\r\n                        <TableCell><input type='text' placeholder='enter your name' value={name} onChange={(e) =>setName(e.target.value)} /></TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                        <TableCell>Roll No</TableCell>\r\n                        <TableCell><input type='text' placeholder='enter your roll no' value={roll} onChange={(e) =>setRoll(e.target.value)}/></TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                        <TableCell>Email</TableCell>\r\n                        <TableCell><input type='text' placeholder='enter your email' value={email} onChange={(e) =>setEmail(e.target.value)} /></TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                        <TableCell><Button variant=\"contained\" type='button' color=\"primary\" onClick={() =>addData()}>Submit</Button></TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                    <FormControl>\r\n                        <InputLabel htmlFor=\"my-input\">Email address</InputLabel>\r\n                        <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\r\n                        <FormHelperText id=\"my-helper-text\">We'll never share your email.</FormHelperText>\r\n                        </FormControl>\r\n                    </TableRow>\r\n                </TableHead>\r\n            </Table>\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <Paper>\r\n            <Table >\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>ID</TableCell>\r\n                        <TableCell>Name</TableCell>\r\n                        <TableCell>Roll No</TableCell>\r\n                        <TableCell>Email</TableCell>\r\n                        <TableCell>Action</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {\r\n                    data.map(value =>(\r\n                        <TableRow>\r\n                            <TableCell>{value.id}</TableCell>\r\n                            <TableCell>{value.name}</TableCell>\r\n                            <TableCell>{value.roll}</TableCell>\r\n                            <TableCell>{value.email}</TableCell>\r\n                            <TableCell><Button variant=\"contained\" color=\"primary\">Submit</Button></TableCell>\r\n                        </TableRow>\r\n                ))\r\n                }\r\n                </TableBody>\r\n            </Table>\r\n          </Paper>\r\n        </Grid>\r\n            </Grid>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Todos;","D:\\React-js\\resturant\\src\\data.jsx",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":16,"column":16,"nodeType":"53","messageId":"54","endLine":16,"endColumn":22},{"ruleId":"51","severity":1,"message":"55","line":19,"column":12,"nodeType":"53","messageId":"54","endLine":19,"endColumn":15},{"ruleId":"51","severity":1,"message":"56","line":21,"column":11,"nodeType":"53","messageId":"54","endLine":21,"endColumn":19},{"ruleId":"57","severity":1,"message":"58","line":26,"column":29,"nodeType":"59","messageId":"60","endLine":26,"endColumn":31},{"ruleId":"61","severity":1,"message":"62","line":34,"column":40,"nodeType":"63","messageId":"64","endLine":34,"endColumn":42},{"ruleId":"51","severity":1,"message":"65","line":2,"column":56,"nodeType":"53","messageId":"54","endLine":2,"endColumn":66},{"ruleId":"51","severity":1,"message":"66","line":19,"column":11,"nodeType":"53","messageId":"54","endLine":19,"endColumn":21},{"ruleId":"57","severity":1,"message":"67","line":20,"column":39,"nodeType":"59","messageId":"60","endLine":20,"endColumn":41},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'setbox' is assigned a value but never used.","Identifier","unusedVar","'sum' is assigned a value but never used.","'orderNow' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'makeStyles' is defined but never used.","'deleteData' is assigned a value but never used.","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]